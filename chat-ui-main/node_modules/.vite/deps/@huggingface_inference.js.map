{
  "version": 3,
  "sources": ["../../@huggingface/inference/dist/index.mjs"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/tasks/index.ts\nvar tasks_exports = {};\n__export(tasks_exports, {\n  audioClassification: () => audioClassification,\n  automaticSpeechRecognition: () => automaticSpeechRecognition,\n  conversational: () => conversational,\n  documentQuestionAnswering: () => documentQuestionAnswering,\n  featureExtraction: () => featureExtraction,\n  fillMask: () => fillMask,\n  imageClassification: () => imageClassification,\n  imageSegmentation: () => imageSegmentation,\n  imageToText: () => imageToText,\n  objectDetection: () => objectDetection,\n  questionAnswering: () => questionAnswering,\n  request: () => request,\n  sentenceSimilarity: () => sentenceSimilarity,\n  streamingRequest: () => streamingRequest,\n  summarization: () => summarization,\n  tableQuestionAnswering: () => tableQuestionAnswering,\n  textClassification: () => textClassification,\n  textGeneration: () => textGeneration,\n  textGenerationStream: () => textGenerationStream,\n  textToImage: () => textToImage,\n  textToSpeech: () => textToSpeech,\n  tokenClassification: () => tokenClassification,\n  translation: () => translation,\n  visualQuestionAnswering: () => visualQuestionAnswering,\n  zeroShotClassification: () => zeroShotClassification\n});\n\n// src/lib/makeRequestOptions.ts\nvar HF_INFERENCE_API_BASE_URL = \"https://api-inference.huggingface.co/models/\";\nfunction makeRequestOptions(args, options) {\n  const { model, accessToken, ...otherArgs } = args;\n  const headers = {};\n  if (accessToken) {\n    headers[\"Authorization\"] = `Bearer ${accessToken}`;\n  }\n  const binary = \"data\" in args && !!args.data;\n  if (!binary) {\n    headers[\"Content-Type\"] = \"application/json\";\n  } else {\n    if (options?.wait_for_model) {\n      headers[\"X-Wait-For-Model\"] = \"true\";\n    }\n    if (options?.use_cache === false) {\n      headers[\"X-Use-Cache\"] = \"false\";\n    }\n    if (options?.dont_load_model) {\n      headers[\"X-Load-Model\"] = \"0\";\n    }\n  }\n  const url = /^http(s?):/.test(model) || model.startsWith(\"/\") ? model : `${HF_INFERENCE_API_BASE_URL}${model}`;\n  const info = {\n    headers,\n    method: \"POST\",\n    body: binary ? args.data : JSON.stringify({\n      ...otherArgs,\n      options\n    }),\n    credentials: options?.includeCredentials ? \"include\" : \"same-origin\"\n  };\n  return { url, info };\n}\n\n// src/tasks/custom/request.ts\nasync function request(args, options) {\n  const { url, info } = makeRequestOptions(args, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\n    return request(args, {\n      ...options,\n      wait_for_model: true\n    });\n  }\n  if (!response.ok) {\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      const output = await response.json();\n      if (output.error) {\n        throw new Error(output.error);\n      }\n    }\n    throw new Error(\"An error occurred while fetching the blob\");\n  }\n  if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n    return await response.json();\n  }\n  return await response.blob();\n}\n\n// src/vendor/fetch-event-source/parse.ts\nfunction getLines(onLine) {\n  let buffer;\n  let position;\n  let fieldLength;\n  let discardTrailingNewline = false;\n  return function onChunk(arr) {\n    if (buffer === void 0) {\n      buffer = arr;\n      position = 0;\n      fieldLength = -1;\n    } else {\n      buffer = concat(buffer, arr);\n    }\n    const bufLength = buffer.length;\n    let lineStart = 0;\n    while (position < bufLength) {\n      if (discardTrailingNewline) {\n        if (buffer[position] === 10 /* NewLine */) {\n          lineStart = ++position;\n        }\n        discardTrailingNewline = false;\n      }\n      let lineEnd = -1;\n      for (; position < bufLength && lineEnd === -1; ++position) {\n        switch (buffer[position]) {\n          case 58 /* Colon */:\n            if (fieldLength === -1) {\n              fieldLength = position - lineStart;\n            }\n            break;\n          case 13 /* CarriageReturn */:\n            discardTrailingNewline = true;\n          case 10 /* NewLine */:\n            lineEnd = position;\n            break;\n        }\n      }\n      if (lineEnd === -1) {\n        break;\n      }\n      onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\n      lineStart = position;\n      fieldLength = -1;\n    }\n    if (lineStart === bufLength) {\n      buffer = void 0;\n    } else if (lineStart !== 0) {\n      buffer = buffer.subarray(lineStart);\n      position -= lineStart;\n    }\n  };\n}\nfunction getMessages(onId, onRetry, onMessage) {\n  let message = newMessage();\n  const decoder = new TextDecoder();\n  return function onLine(line, fieldLength) {\n    if (line.length === 0) {\n      onMessage?.(message);\n      message = newMessage();\n    } else if (fieldLength > 0) {\n      const field = decoder.decode(line.subarray(0, fieldLength));\n      const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* Space */ ? 2 : 1);\n      const value = decoder.decode(line.subarray(valueOffset));\n      switch (field) {\n        case \"data\":\n          message.data = message.data ? message.data + \"\\n\" + value : value;\n          break;\n        case \"event\":\n          message.event = value;\n          break;\n        case \"id\":\n          onId(message.id = value);\n          break;\n        case \"retry\":\n          const retry = parseInt(value, 10);\n          if (!isNaN(retry)) {\n            onRetry(message.retry = retry);\n          }\n          break;\n      }\n    }\n  };\n}\nfunction concat(a, b) {\n  const res = new Uint8Array(a.length + b.length);\n  res.set(a);\n  res.set(b, a.length);\n  return res;\n}\nfunction newMessage() {\n  return {\n    data: \"\",\n    event: \"\",\n    id: \"\",\n    retry: void 0\n  };\n}\n\n// src/tasks/custom/streamingRequest.ts\nasync function* streamingRequest(args, options) {\n  const { url, info } = makeRequestOptions({ ...args, stream: true }, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\n    return streamingRequest(args, {\n      ...options,\n      wait_for_model: true\n    });\n  }\n  if (!response.ok) {\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      const output = await response.json();\n      if (output.error) {\n        throw new Error(output.error);\n      }\n    }\n    throw new Error(`Server response contains error: ${response.status}`);\n  }\n  if (response.headers.get(\"content-type\") !== \"text/event-stream\") {\n    throw new Error(\n      `Server does not support event stream content type, it returned ` + response.headers.get(\"content-type\")\n    );\n  }\n  if (!response.body) {\n    return;\n  }\n  const reader = response.body.getReader();\n  let events = [];\n  const onEvent = (event) => {\n    events.push(event);\n  };\n  const onChunk = getLines(\n    getMessages(\n      () => {\n      },\n      () => {\n      },\n      onEvent\n    )\n  );\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done)\n        return;\n      onChunk(value);\n      for (const event of events) {\n        if (event.data.length > 0) {\n          const data = JSON.parse(event.data);\n          if (typeof data === \"object\" && data !== null && \"error\" in data) {\n            throw new Error(data.error);\n          }\n          yield data;\n        }\n      }\n      events = [];\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\n// src/lib/InferenceOutputError.ts\nvar InferenceOutputError = class extends TypeError {\n  constructor(message) {\n    super(\n      `Invalid inference output: ${message}. Use the 'request' method with the same parameters to do a custom call with no type checking.`\n    );\n    this.name = \"InferenceOutputError\";\n  }\n};\n\n// src/tasks/audio/audioClassification.ts\nasync function audioClassification(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/audio/automaticSpeechRecognition.ts\nasync function automaticSpeechRecognition(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = typeof res?.text === \"string\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {text: string}\");\n  }\n  return res;\n}\n\n// src/tasks/audio/textToSpeech.ts\nasync function textToSpeech(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageClassification.ts\nasync function imageClassification(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageSegmentation.ts\nasync function imageSegmentation(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.mask === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, mask: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageToText.ts\nasync function imageToText(args, options) {\n  const res = (await request(args, options))?.[0];\n  if (typeof res?.generated_text !== \"string\") {\n    throw new InferenceOutputError(\"Expected {generated_text: string}\");\n  }\n  return res;\n}\n\n// src/tasks/cv/objectDetection.ts\nasync function objectDetection(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.label === \"string\" && typeof x.score === \"number\" && typeof x.box.xmin === \"number\" && typeof x.box.ymin === \"number\" && typeof x.box.xmax === \"number\" && typeof x.box.ymax === \"number\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{label:string; score:number; box:{xmin:number; ymin:number; xmax:number; ymax:number}}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/cv/textToImage.ts\nasync function textToImage(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/conversational.ts\nasync function conversational(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = Array.isArray(res.conversation.generated_responses) && res.conversation.generated_responses.every((x) => typeof x === \"string\") && Array.isArray(res.conversation.past_user_inputs) && res.conversation.past_user_inputs.every((x) => typeof x === \"string\") && typeof res.generated_text === \"string\" && Array.isArray(res.warnings) && res.warnings.every((x) => typeof x === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected {conversation: {generated_responses: string[], past_user_inputs: string[]}, generated_text: string, warnings: string[]}\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/featureExtraction.ts\nasync function featureExtraction(args, options) {\n  const res = await request(args, options);\n  let isValidOutput = true;\n  if (Array.isArray(res)) {\n    for (const e of res) {\n      if (Array.isArray(e)) {\n        isValidOutput = e.every((x) => typeof x === \"number\");\n        if (!isValidOutput) {\n          break;\n        }\n      } else if (typeof e !== \"number\") {\n        isValidOutput = false;\n        break;\n      }\n    }\n  } else {\n    isValidOutput = false;\n  }\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<number[] | number>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/fillMask.ts\nasync function fillMask(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.score === \"number\" && typeof x.sequence === \"string\" && typeof x.token === \"number\" && typeof x.token_str === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{score: number, sequence: string, token: number, token_str: string}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/questionAnswering.ts\nasync function questionAnswering(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = typeof res === \"object\" && !!res && typeof res.answer === \"string\" && typeof res.end === \"number\" && typeof res.score === \"number\" && typeof res.start === \"number\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {answer: string, end: number, score: number, start: number}\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/sentenceSimilarity.ts\nasync function sentenceSimilarity(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/summarization.ts\nasync function summarization(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.summary_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{summary_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/tableQuestionAnswering.ts\nasync function tableQuestionAnswering(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = typeof res?.aggregator === \"string\" && typeof res.answer === \"string\" && Array.isArray(res.cells) && res.cells.every((x) => typeof x === \"string\") && Array.isArray(res.coordinates) && res.coordinates.every((coord) => Array.isArray(coord) && coord.every((x) => typeof x === \"number\"));\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected {aggregator: string, answer: string, cells: string[], coordinates: number[][]}\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/textClassification.ts\nasync function textClassification(args, options) {\n  const res = (await request(args, options))?.[0];\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/textGeneration.ts\nasync function textGeneration(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.generated_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{generated_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/textGenerationStream.ts\nasync function* textGenerationStream(args, options) {\n  yield* streamingRequest(args, options);\n}\n\n// src/utils/toArray.ts\nfunction toArray(obj) {\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n  return [obj];\n}\n\n// src/tasks/nlp/tokenClassification.ts\nasync function tokenClassification(args, options) {\n  const res = toArray(await request(args, options));\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.end === \"number\" && typeof x.entity_group === \"string\" && typeof x.score === \"number\" && typeof x.start === \"number\" && typeof x.word === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{end: number, entity_group: string, score: number, start: number, word: string}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/translation.ts\nasync function translation(args, options) {\n  const res = await request(args, options);\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.translation_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected type Array<{translation_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/zeroShotClassification.ts\nasync function zeroShotClassification(args, options) {\n  const res = toArray(\n    await request(args, options)\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => Array.isArray(x.labels) && x.labels.every((_label) => typeof _label === \"string\") && Array.isArray(x.scores) && x.scores.every((_score) => typeof _score === \"number\") && typeof x.sequence === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{labels: string[], scores: number[], sequence: string}>\");\n  }\n  return res;\n}\n\n// src/utils/base64FromBytes.ts\nfunction base64FromBytes(arr) {\n  if (globalThis.Buffer) {\n    return globalThis.Buffer.from(arr).toString(\"base64\");\n  } else {\n    const bin = [];\n    arr.forEach((byte) => {\n      bin.push(String.fromCharCode(byte));\n    });\n    return globalThis.btoa(bin.join(\"\"));\n  }\n}\n\n// src/tasks/multimodal/documentQuestionAnswering.ts\nasync function documentQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob to base64\n      image: base64FromBytes(new Uint8Array(await args.inputs.image.arrayBuffer()))\n    }\n  };\n  const res = toArray(\n    await request(reqArgs, options)\n  )?.[0];\n  const isValidOutput = typeof res?.answer === \"string\" && (typeof res.end === \"number\" || typeof res.end === \"undefined\") && (typeof res.score === \"number\" || typeof res.score === \"undefined\") && (typeof res.start === \"number\" || typeof res.start === \"undefined\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, end?: number, score?: number, start?: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/multimodal/visualQuestionAnswering.ts\nasync function visualQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob to base64\n      image: base64FromBytes(new Uint8Array(await args.inputs.image.arrayBuffer()))\n    }\n  };\n  const res = (await request(reqArgs, options))?.[0];\n  const isValidOutput = typeof res?.answer === \"string\" && typeof res.score === \"number\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/HfInference.ts\nvar HfInference = class {\n  accessToken;\n  defaultOptions;\n  constructor(accessToken = \"\", defaultOptions = {}) {\n    this.accessToken = accessToken;\n    this.defaultOptions = defaultOptions;\n    for (const [name, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name, {\n        enumerable: false,\n        value: (params, options) => (\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fn({ ...params, accessToken }, { ...defaultOptions, ...options })\n        )\n      });\n    }\n  }\n  /**\n   * Returns copy of HfInference tied to a specified endpoint.\n   */\n  endpoint(endpointUrl) {\n    return new HfInferenceEndpoint(endpointUrl, this.accessToken, this.defaultOptions);\n  }\n};\nvar HfInferenceEndpoint = class {\n  constructor(endpointUrl, accessToken = \"\", defaultOptions = {}) {\n    accessToken;\n    defaultOptions;\n    for (const [name, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name, {\n        enumerable: false,\n        value: (params, options) => (\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fn({ ...params, accessToken, model: endpointUrl }, { ...defaultOptions, ...options })\n        )\n      });\n    }\n  }\n};\nexport {\n  HfInference,\n  HfInferenceEndpoint,\n  audioClassification,\n  automaticSpeechRecognition,\n  conversational,\n  documentQuestionAnswering,\n  featureExtraction,\n  fillMask,\n  imageClassification,\n  imageSegmentation,\n  imageToText,\n  objectDetection,\n  questionAnswering,\n  request,\n  sentenceSimilarity,\n  streamingRequest,\n  summarization,\n  tableQuestionAnswering,\n  textClassification,\n  textGeneration,\n  textGenerationStream,\n  textToImage,\n  textToSpeech,\n  tokenClassification,\n  translation,\n  visualQuestionAnswering,\n  zeroShotClassification\n};\n"],
  "mappings": ";;;;;AAAA,IAAI,YAAY,OAAO;AACvB,IAAI,WAAW,CAAC,QAAQ,QAAQ;AAC9B,WAAS,QAAQ;AACf,cAAU,QAAQ,MAAM,EAAE,KAAK,IAAI,IAAI,GAAG,YAAY,KAAK,CAAC;AAChE;AAGA,IAAI,gBAAgB,CAAC;AACrB,SAAS,eAAe;AAAA,EACtB,qBAAqB,MAAM;AAAA,EAC3B,4BAA4B,MAAM;AAAA,EAClC,gBAAgB,MAAM;AAAA,EACtB,2BAA2B,MAAM;AAAA,EACjC,mBAAmB,MAAM;AAAA,EACzB,UAAU,MAAM;AAAA,EAChB,qBAAqB,MAAM;AAAA,EAC3B,mBAAmB,MAAM;AAAA,EACzB,aAAa,MAAM;AAAA,EACnB,iBAAiB,MAAM;AAAA,EACvB,mBAAmB,MAAM;AAAA,EACzB,SAAS,MAAM;AAAA,EACf,oBAAoB,MAAM;AAAA,EAC1B,kBAAkB,MAAM;AAAA,EACxB,eAAe,MAAM;AAAA,EACrB,wBAAwB,MAAM;AAAA,EAC9B,oBAAoB,MAAM;AAAA,EAC1B,gBAAgB,MAAM;AAAA,EACtB,sBAAsB,MAAM;AAAA,EAC5B,aAAa,MAAM;AAAA,EACnB,cAAc,MAAM;AAAA,EACpB,qBAAqB,MAAM;AAAA,EAC3B,aAAa,MAAM;AAAA,EACnB,yBAAyB,MAAM;AAAA,EAC/B,wBAAwB,MAAM;AAChC,CAAC;AAGD,IAAI,4BAA4B;AAChC,SAAS,mBAAmB,MAAM,SAAS;AACzC,QAAM,EAAE,OAAO,aAAa,GAAG,UAAU,IAAI;AAC7C,QAAM,UAAU,CAAC;AACjB,MAAI,aAAa;AACf,YAAQ,eAAe,IAAI,UAAU;AAAA,EACvC;AACA,QAAM,SAAS,UAAU,QAAQ,CAAC,CAAC,KAAK;AACxC,MAAI,CAAC,QAAQ;AACX,YAAQ,cAAc,IAAI;AAAA,EAC5B,OAAO;AACL,QAAI,mCAAS,gBAAgB;AAC3B,cAAQ,kBAAkB,IAAI;AAAA,IAChC;AACA,SAAI,mCAAS,eAAc,OAAO;AAChC,cAAQ,aAAa,IAAI;AAAA,IAC3B;AACA,QAAI,mCAAS,iBAAiB;AAC5B,cAAQ,cAAc,IAAI;AAAA,IAC5B;AAAA,EACF;AACA,QAAM,MAAM,aAAa,KAAK,KAAK,KAAK,MAAM,WAAW,GAAG,IAAI,QAAQ,GAAG,4BAA4B;AACvG,QAAM,OAAO;AAAA,IACX;AAAA,IACA,QAAQ;AAAA,IACR,MAAM,SAAS,KAAK,OAAO,KAAK,UAAU;AAAA,MACxC,GAAG;AAAA,MACH;AAAA,IACF,CAAC;AAAA,IACD,cAAa,mCAAS,sBAAqB,YAAY;AAAA,EACzD;AACA,SAAO,EAAE,KAAK,KAAK;AACrB;AAGA,eAAe,QAAQ,MAAM,SAAS;AAxEtC;AAyEE,QAAM,EAAE,KAAK,KAAK,IAAI,mBAAmB,MAAM,OAAO;AACtD,QAAM,WAAW,QAAO,mCAAS,UAAS,OAAO,KAAK,IAAI;AAC1D,OAAI,mCAAS,oBAAmB,SAAS,SAAS,WAAW,OAAO,EAAC,mCAAS,iBAAgB;AAC5F,WAAO,QAAQ,MAAM;AAAA,MACnB,GAAG;AAAA,MACH,gBAAgB;AAAA,IAClB,CAAC;AAAA,EACH;AACA,MAAI,CAAC,SAAS,IAAI;AAChB,SAAI,cAAS,QAAQ,IAAI,cAAc,MAAnC,mBAAsC,WAAW,qBAAqB;AACxE,YAAM,SAAS,MAAM,SAAS,KAAK;AACnC,UAAI,OAAO,OAAO;AAChB,cAAM,IAAI,MAAM,OAAO,KAAK;AAAA,MAC9B;AAAA,IACF;AACA,UAAM,IAAI,MAAM,2CAA2C;AAAA,EAC7D;AACA,OAAI,cAAS,QAAQ,IAAI,cAAc,MAAnC,mBAAsC,WAAW,qBAAqB;AACxE,WAAO,MAAM,SAAS,KAAK;AAAA,EAC7B;AACA,SAAO,MAAM,SAAS,KAAK;AAC7B;AAGA,SAAS,SAAS,QAAQ;AACxB,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI,yBAAyB;AAC7B,SAAO,SAAS,QAAQ,KAAK;AAC3B,QAAI,WAAW,QAAQ;AACrB,eAAS;AACT,iBAAW;AACX,oBAAc;AAAA,IAChB,OAAO;AACL,eAAS,OAAO,QAAQ,GAAG;AAAA,IAC7B;AACA,UAAM,YAAY,OAAO;AACzB,QAAI,YAAY;AAChB,WAAO,WAAW,WAAW;AAC3B,UAAI,wBAAwB;AAC1B,YAAI,OAAO,QAAQ,MAAM,IAAkB;AACzC,sBAAY,EAAE;AAAA,QAChB;AACA,iCAAyB;AAAA,MAC3B;AACA,UAAI,UAAU;AACd,aAAO,WAAW,aAAa,YAAY,IAAI,EAAE,UAAU;AACzD,gBAAQ,OAAO,QAAQ,GAAG;AAAA,UACxB,KAAK;AACH,gBAAI,gBAAgB,IAAI;AACtB,4BAAc,WAAW;AAAA,YAC3B;AACA;AAAA,UACF,KAAK;AACH,qCAAyB;AAAA,UAC3B,KAAK;AACH,sBAAU;AACV;AAAA,QACJ;AAAA,MACF;AACA,UAAI,YAAY,IAAI;AAClB;AAAA,MACF;AACA,aAAO,OAAO,SAAS,WAAW,OAAO,GAAG,WAAW;AACvD,kBAAY;AACZ,oBAAc;AAAA,IAChB;AACA,QAAI,cAAc,WAAW;AAC3B,eAAS;AAAA,IACX,WAAW,cAAc,GAAG;AAC1B,eAAS,OAAO,SAAS,SAAS;AAClC,kBAAY;AAAA,IACd;AAAA,EACF;AACF;AACA,SAAS,YAAY,MAAM,SAAS,WAAW;AAC7C,MAAI,UAAU,WAAW;AACzB,QAAM,UAAU,IAAI,YAAY;AAChC,SAAO,SAAS,OAAO,MAAM,aAAa;AACxC,QAAI,KAAK,WAAW,GAAG;AACrB,6CAAY;AACZ,gBAAU,WAAW;AAAA,IACvB,WAAW,cAAc,GAAG;AAC1B,YAAM,QAAQ,QAAQ,OAAO,KAAK,SAAS,GAAG,WAAW,CAAC;AAC1D,YAAM,cAAc,eAAe,KAAK,cAAc,CAAC,MAAM,KAAiB,IAAI;AAClF,YAAM,QAAQ,QAAQ,OAAO,KAAK,SAAS,WAAW,CAAC;AACvD,cAAQ,OAAO;AAAA,QACb,KAAK;AACH,kBAAQ,OAAO,QAAQ,OAAO,QAAQ,OAAO,OAAO,QAAQ;AAC5D;AAAA,QACF,KAAK;AACH,kBAAQ,QAAQ;AAChB;AAAA,QACF,KAAK;AACH,eAAK,QAAQ,KAAK,KAAK;AACvB;AAAA,QACF,KAAK;AACH,gBAAM,QAAQ,SAAS,OAAO,EAAE;AAChC,cAAI,CAAC,MAAM,KAAK,GAAG;AACjB,oBAAQ,QAAQ,QAAQ,KAAK;AAAA,UAC/B;AACA;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AACF;AACA,SAAS,OAAO,GAAG,GAAG;AACpB,QAAM,MAAM,IAAI,WAAW,EAAE,SAAS,EAAE,MAAM;AAC9C,MAAI,IAAI,CAAC;AACT,MAAI,IAAI,GAAG,EAAE,MAAM;AACnB,SAAO;AACT;AACA,SAAS,aAAa;AACpB,SAAO;AAAA,IACL,MAAM;AAAA,IACN,OAAO;AAAA,IACP,IAAI;AAAA,IACJ,OAAO;AAAA,EACT;AACF;AAGA,gBAAgB,iBAAiB,MAAM,SAAS;AApMhD;AAqME,QAAM,EAAE,KAAK,KAAK,IAAI,mBAAmB,EAAE,GAAG,MAAM,QAAQ,KAAK,GAAG,OAAO;AAC3E,QAAM,WAAW,QAAO,mCAAS,UAAS,OAAO,KAAK,IAAI;AAC1D,OAAI,mCAAS,oBAAmB,SAAS,SAAS,WAAW,OAAO,EAAC,mCAAS,iBAAgB;AAC5F,WAAO,iBAAiB,MAAM;AAAA,MAC5B,GAAG;AAAA,MACH,gBAAgB;AAAA,IAClB,CAAC;AAAA,EACH;AACA,MAAI,CAAC,SAAS,IAAI;AAChB,SAAI,cAAS,QAAQ,IAAI,cAAc,MAAnC,mBAAsC,WAAW,qBAAqB;AACxE,YAAM,SAAS,MAAM,SAAS,KAAK;AACnC,UAAI,OAAO,OAAO;AAChB,cAAM,IAAI,MAAM,OAAO,KAAK;AAAA,MAC9B;AAAA,IACF;AACA,UAAM,IAAI,MAAM,mCAAmC,SAAS,QAAQ;AAAA,EACtE;AACA,MAAI,SAAS,QAAQ,IAAI,cAAc,MAAM,qBAAqB;AAChE,UAAM,IAAI;AAAA,MACR,oEAAoE,SAAS,QAAQ,IAAI,cAAc;AAAA,IACzG;AAAA,EACF;AACA,MAAI,CAAC,SAAS,MAAM;AAClB;AAAA,EACF;AACA,QAAM,SAAS,SAAS,KAAK,UAAU;AACvC,MAAI,SAAS,CAAC;AACd,QAAM,UAAU,CAAC,UAAU;AACzB,WAAO,KAAK,KAAK;AAAA,EACnB;AACA,QAAM,UAAU;AAAA,IACd;AAAA,MACE,MAAM;AAAA,MACN;AAAA,MACA,MAAM;AAAA,MACN;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACA,MAAI;AACF,WAAO,MAAM;AACX,YAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAC1C,UAAI;AACF;AACF,cAAQ,KAAK;AACb,iBAAW,SAAS,QAAQ;AAC1B,YAAI,MAAM,KAAK,SAAS,GAAG;AACzB,gBAAM,OAAO,KAAK,MAAM,MAAM,IAAI;AAClC,cAAI,OAAO,SAAS,YAAY,SAAS,QAAQ,WAAW,MAAM;AAChE,kBAAM,IAAI,MAAM,KAAK,KAAK;AAAA,UAC5B;AACA,gBAAM;AAAA,QACR;AAAA,MACF;AACA,eAAS,CAAC;AAAA,IACZ;AAAA,EACF,UAAE;AACA,WAAO,YAAY;AAAA,EACrB;AACF;AAGA,IAAI,uBAAuB,cAAc,UAAU;AAAA,EACjD,YAAY,SAAS;AACnB;AAAA,MACE,6BAA6B;AAAA,IAC/B;AACA,SAAK,OAAO;AAAA,EACd;AACF;AAGA,eAAe,oBAAoB,MAAM,SAAS;AAChD,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,MAAM,QAAQ,GAAG,KAAK,IAAI,MAAM,CAAC,MAAM,OAAO,EAAE,UAAU,YAAY,OAAO,EAAE,UAAU,QAAQ;AACvH,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,gDAAgD;AAAA,EACjF;AACA,SAAO;AACT;AAGA,eAAe,2BAA2B,MAAM,SAAS;AACvD,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,QAAO,2BAAK,UAAS;AAC3C,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,yBAAyB;AAAA,EAC1D;AACA,SAAO;AACT;AAGA,eAAe,aAAa,MAAM,SAAS;AACzC,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,OAAO,eAAe;AAC5C,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,eAAe;AAAA,EAChD;AACA,SAAO;AACT;AAGA,eAAe,oBAAoB,MAAM,SAAS;AAChD,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,MAAM,QAAQ,GAAG,KAAK,IAAI,MAAM,CAAC,MAAM,OAAO,EAAE,UAAU,YAAY,OAAO,EAAE,UAAU,QAAQ;AACvH,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,gDAAgD;AAAA,EACjF;AACA,SAAO;AACT;AAGA,eAAe,kBAAkB,MAAM,SAAS;AAC9C,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,MAAM,QAAQ,GAAG,KAAK,IAAI,MAAM,CAAC,MAAM,OAAO,EAAE,UAAU,YAAY,OAAO,EAAE,SAAS,YAAY,OAAO,EAAE,UAAU,QAAQ;AACrJ,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,8DAA8D;AAAA,EAC/F;AACA,SAAO;AACT;AAGA,eAAe,YAAY,MAAM,SAAS;AA/T1C;AAgUE,QAAM,OAAO,WAAM,QAAQ,MAAM,OAAO,MAA3B,mBAAgC;AAC7C,MAAI,QAAO,2BAAK,oBAAmB,UAAU;AAC3C,UAAM,IAAI,qBAAqB,mCAAmC;AAAA,EACpE;AACA,SAAO;AACT;AAGA,eAAe,gBAAgB,MAAM,SAAS;AAC5C,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,MAAM,QAAQ,GAAG,KAAK,IAAI;AAAA,IAC9C,CAAC,MAAM,OAAO,EAAE,UAAU,YAAY,OAAO,EAAE,UAAU,YAAY,OAAO,EAAE,IAAI,SAAS,YAAY,OAAO,EAAE,IAAI,SAAS,YAAY,OAAO,EAAE,IAAI,SAAS,YAAY,OAAO,EAAE,IAAI,SAAS;AAAA,EACnM;AACA,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAGA,eAAe,YAAY,MAAM,SAAS;AACxC,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,OAAO,eAAe;AAC5C,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,eAAe;AAAA,EAChD;AACA,SAAO;AACT;AAGA,eAAe,eAAe,MAAM,SAAS;AAC3C,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,MAAM,QAAQ,IAAI,aAAa,mBAAmB,KAAK,IAAI,aAAa,oBAAoB,MAAM,CAAC,MAAM,OAAO,MAAM,QAAQ,KAAK,MAAM,QAAQ,IAAI,aAAa,gBAAgB,KAAK,IAAI,aAAa,iBAAiB,MAAM,CAAC,MAAM,OAAO,MAAM,QAAQ,KAAK,OAAO,IAAI,mBAAmB,YAAY,MAAM,QAAQ,IAAI,QAAQ,KAAK,IAAI,SAAS,MAAM,CAAC,MAAM,OAAO,MAAM,QAAQ;AAC9Y,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAGA,eAAe,kBAAkB,MAAM,SAAS;AAC9C,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,MAAI,gBAAgB;AACpB,MAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,eAAW,KAAK,KAAK;AACnB,UAAI,MAAM,QAAQ,CAAC,GAAG;AACpB,wBAAgB,EAAE,MAAM,CAAC,MAAM,OAAO,MAAM,QAAQ;AACpD,YAAI,CAAC,eAAe;AAClB;AAAA,QACF;AAAA,MACF,WAAW,OAAO,MAAM,UAAU;AAChC,wBAAgB;AAChB;AAAA,MACF;AAAA,IACF;AAAA,EACF,OAAO;AACL,oBAAgB;AAAA,EAClB;AACA,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,mCAAmC;AAAA,EACpE;AACA,SAAO;AACT;AAGA,eAAe,SAAS,MAAM,SAAS;AACrC,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,MAAM,QAAQ,GAAG,KAAK,IAAI;AAAA,IAC9C,CAAC,MAAM,OAAO,EAAE,UAAU,YAAY,OAAO,EAAE,aAAa,YAAY,OAAO,EAAE,UAAU,YAAY,OAAO,EAAE,cAAc;AAAA,EAChI;AACA,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAGA,eAAe,kBAAkB,MAAM,SAAS;AAC9C,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,OAAO,QAAQ,YAAY,CAAC,CAAC,OAAO,OAAO,IAAI,WAAW,YAAY,OAAO,IAAI,QAAQ,YAAY,OAAO,IAAI,UAAU,YAAY,OAAO,IAAI,UAAU;AACjL,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,sEAAsE;AAAA,EACvG;AACA,SAAO;AACT;AAGA,eAAe,mBAAmB,MAAM,SAAS;AAC/C,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,MAAM,QAAQ,GAAG,KAAK,IAAI,MAAM,CAAC,MAAM,OAAO,MAAM,QAAQ;AAClF,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,mBAAmB;AAAA,EACpD;AACA,SAAO;AACT;AAGA,eAAe,cAAc,MAAM,SAAS;AAC1C,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,MAAM,QAAQ,GAAG,KAAK,IAAI,MAAM,CAAC,MAAM,QAAO,uBAAG,kBAAiB,QAAQ;AAChG,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,wCAAwC;AAAA,EACzE;AACA,SAAO,2BAAM;AACf;AAGA,eAAe,uBAAuB,MAAM,SAAS;AACnD,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,QAAO,2BAAK,gBAAe,YAAY,OAAO,IAAI,WAAW,YAAY,MAAM,QAAQ,IAAI,KAAK,KAAK,IAAI,MAAM,MAAM,CAAC,MAAM,OAAO,MAAM,QAAQ,KAAK,MAAM,QAAQ,IAAI,WAAW,KAAK,IAAI,YAAY,MAAM,CAAC,UAAU,MAAM,QAAQ,KAAK,KAAK,MAAM,MAAM,CAAC,MAAM,OAAO,MAAM,QAAQ,CAAC;AAChT,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAGA,eAAe,mBAAmB,MAAM,SAAS;AA7bjD;AA8bE,QAAM,OAAO,WAAM,QAAQ,MAAM,OAAO,MAA3B,mBAAgC;AAC7C,QAAM,gBAAgB,MAAM,QAAQ,GAAG,KAAK,IAAI,MAAM,CAAC,MAAM,QAAO,uBAAG,WAAU,YAAY,OAAO,EAAE,UAAU,QAAQ;AACxH,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,gDAAgD;AAAA,EACjF;AACA,SAAO;AACT;AAGA,eAAe,eAAe,MAAM,SAAS;AAC3C,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,MAAM,QAAQ,GAAG,KAAK,IAAI,MAAM,CAAC,MAAM,QAAO,uBAAG,oBAAmB,QAAQ;AAClG,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,0CAA0C;AAAA,EAC3E;AACA,SAAO,2BAAM;AACf;AAGA,gBAAgB,qBAAqB,MAAM,SAAS;AAClD,SAAO,iBAAiB,MAAM,OAAO;AACvC;AAGA,SAAS,QAAQ,KAAK;AACpB,MAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,WAAO;AAAA,EACT;AACA,SAAO,CAAC,GAAG;AACb;AAGA,eAAe,oBAAoB,MAAM,SAAS;AAChD,QAAM,MAAM,QAAQ,MAAM,QAAQ,MAAM,OAAO,CAAC;AAChD,QAAM,gBAAgB,MAAM,QAAQ,GAAG,KAAK,IAAI;AAAA,IAC9C,CAAC,MAAM,OAAO,EAAE,QAAQ,YAAY,OAAO,EAAE,iBAAiB,YAAY,OAAO,EAAE,UAAU,YAAY,OAAO,EAAE,UAAU,YAAY,OAAO,EAAE,SAAS;AAAA,EAC5J;AACA,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAGA,eAAe,YAAY,MAAM,SAAS;AACxC,QAAM,MAAM,MAAM,QAAQ,MAAM,OAAO;AACvC,QAAM,gBAAgB,MAAM,QAAQ,GAAG,KAAK,IAAI,MAAM,CAAC,MAAM,QAAO,uBAAG,sBAAqB,QAAQ;AACpG,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,iDAAiD;AAAA,EAClF;AACA,SAAO,2BAAM;AACf;AAGA,eAAe,uBAAuB,MAAM,SAAS;AACnD,QAAM,MAAM;AAAA,IACV,MAAM,QAAQ,MAAM,OAAO;AAAA,EAC7B;AACA,QAAM,gBAAgB,MAAM,QAAQ,GAAG,KAAK,IAAI;AAAA,IAC9C,CAAC,MAAM,MAAM,QAAQ,EAAE,MAAM,KAAK,EAAE,OAAO,MAAM,CAAC,WAAW,OAAO,WAAW,QAAQ,KAAK,MAAM,QAAQ,EAAE,MAAM,KAAK,EAAE,OAAO,MAAM,CAAC,WAAW,OAAO,WAAW,QAAQ,KAAK,OAAO,EAAE,aAAa;AAAA,EACzM;AACA,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,wEAAwE;AAAA,EACzG;AACA,SAAO;AACT;AAGA,SAAS,gBAAgB,KAAK;AAC5B,MAAI,WAAW,QAAQ;AACrB,WAAO,WAAW,OAAO,KAAK,GAAG,EAAE,SAAS,QAAQ;AAAA,EACtD,OAAO;AACL,UAAM,MAAM,CAAC;AACb,QAAI,QAAQ,CAAC,SAAS;AACpB,UAAI,KAAK,OAAO,aAAa,IAAI,CAAC;AAAA,IACpC,CAAC;AACD,WAAO,WAAW,KAAK,IAAI,KAAK,EAAE,CAAC;AAAA,EACrC;AACF;AAGA,eAAe,0BAA0B,MAAM,SAAS;AAjhBxD;AAkhBE,QAAM,UAAU;AAAA,IACd,GAAG;AAAA,IACH,QAAQ;AAAA,MACN,UAAU,KAAK,OAAO;AAAA;AAAA,MAEtB,OAAO,gBAAgB,IAAI,WAAW,MAAM,KAAK,OAAO,MAAM,YAAY,CAAC,CAAC;AAAA,IAC9E;AAAA,EACF;AACA,QAAM,OAAM;AAAA,IACV,MAAM,QAAQ,SAAS,OAAO;AAAA,EAChC,MAFY,mBAER;AACJ,QAAM,gBAAgB,QAAO,2BAAK,YAAW,aAAa,OAAO,IAAI,QAAQ,YAAY,OAAO,IAAI,QAAQ,iBAAiB,OAAO,IAAI,UAAU,YAAY,OAAO,IAAI,UAAU,iBAAiB,OAAO,IAAI,UAAU,YAAY,OAAO,IAAI,UAAU;AAC1P,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,gFAAgF;AAAA,EACjH;AACA,SAAO;AACT;AAGA,eAAe,wBAAwB,MAAM,SAAS;AAriBtD;AAsiBE,QAAM,UAAU;AAAA,IACd,GAAG;AAAA,IACH,QAAQ;AAAA,MACN,UAAU,KAAK,OAAO;AAAA;AAAA,MAEtB,OAAO,gBAAgB,IAAI,WAAW,MAAM,KAAK,OAAO,MAAM,YAAY,CAAC,CAAC;AAAA,IAC9E;AAAA,EACF;AACA,QAAM,OAAO,WAAM,QAAQ,SAAS,OAAO,MAA9B,mBAAmC;AAChD,QAAM,gBAAgB,QAAO,2BAAK,YAAW,YAAY,OAAO,IAAI,UAAU;AAC9E,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,qBAAqB,iDAAiD;AAAA,EAClF;AACA,SAAO;AACT;AAGA,IAAI,cAAc,MAAM;AAAA,EAGtB,YAAY,cAAc,IAAI,iBAAiB,CAAC,GAAG;AAFnD;AACA;AAEE,SAAK,cAAc;AACnB,SAAK,iBAAiB;AACtB,eAAW,CAAC,MAAM,EAAE,KAAK,OAAO,QAAQ,aAAa,GAAG;AACtD,aAAO,eAAe,MAAM,MAAM;AAAA,QAChC,YAAY;AAAA,QACZ,OAAO,CAAC,QAAQ;AAAA;AAAA,UAEd,GAAG,EAAE,GAAG,QAAQ,YAAY,GAAG,EAAE,GAAG,gBAAgB,GAAG,QAAQ,CAAC;AAAA;AAAA,MAEpE,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS,aAAa;AACpB,WAAO,IAAI,oBAAoB,aAAa,KAAK,aAAa,KAAK,cAAc;AAAA,EACnF;AACF;AACA,IAAI,sBAAsB,MAAM;AAAA,EAC9B,YAAY,aAAa,cAAc,IAAI,iBAAiB,CAAC,GAAG;AAC9D;AACA;AACA,eAAW,CAAC,MAAM,EAAE,KAAK,OAAO,QAAQ,aAAa,GAAG;AACtD,aAAO,eAAe,MAAM,MAAM;AAAA,QAChC,YAAY;AAAA,QACZ,OAAO,CAAC,QAAQ;AAAA;AAAA,UAEd,GAAG,EAAE,GAAG,QAAQ,aAAa,OAAO,YAAY,GAAG,EAAE,GAAG,gBAAgB,GAAG,QAAQ,CAAC;AAAA;AAAA,MAExF,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
